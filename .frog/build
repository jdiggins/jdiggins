((3) 0 () 3 ((p+ #"/home/jdiggity/playground/racket/frog-blog/_src/posts/2012-01-01-a-2012-blog-post.md" . unix) (p+ #"/home/jdiggity/playground/racket/frog-blog/_src/posts/Guitar/2019-08-22-test-post.md" . unix) (p+ #"/home/jdiggity/playground/racket/frog-blog/_src/posts/Programming/2019-08-22-creating-blog-frog.md" . unix)) () (h ! (equal) ((p+ #"/home/jdiggity/playground/racket/frog-blog/_src/posts/Guitar/2019-08-22-test-post.md" . unix) f post (u . "An Intro to P4 Tuning") (? . 1) 1566503417 (p+ #"/home/jdiggity/playground/racket/frog-blog/2019/08/an-intro-to-p4-tuning.html" . unix) (u . "/2019/08/an-intro-to-p4-tuning.html") (u . "2019-08-22T15:15:30") (? . 0) (? . 2) (c (u . "Guitar")) (u . "\n<p>Here will be a post about getting started in P4 tuning!</p>") #t (u . "\n<p>Here will be a post about getting started in P4 tuning!</p>\n<!-- more-->")) ((p+ #"/home/jdiggity/playground/racket/frog-blog/_src/posts/2012-01-01-a-2012-blog-post.md" . unix) f post (u . "A 2012 blog post") (? . 0) 1566501083 (p+ #"/home/jdiggity/playground/racket/frog-blog/2012/01/a-2012-blog-post.html" . unix) (u . "/2012/01/a-2012-blog-post.html") (u . "2012-01-01T00:00:00") #f (? . 1) (c (u . "foo") c (u . "bar") c (u . "tag with spaces") c (u . "baz")) (u . "\n<p>Here is an example blog post.</p>\n\n<p>Everything after this paragraph &ldquo;after the break&rdquo;. On index pages and Atom feeds, it will become &ldquo;Continue reading&hellip;&rdquo;, if you configure them to include only the summary &ldquo;blurb&rdquo; before the break.</p>\n\n<pre><code>some code</code></pre>") #t (u . "\n<p>Here is an example blog post.</p>\n\n<p>Everything after this paragraph &ldquo;after the break&rdquo;. On index pages and Atom feeds, it will become &ldquo;Continue reading&hellip;&rdquo;, if you configure them to include only the summary &ldquo;blurb&rdquo; before the break.</p>\n\n<pre><code>some code</code></pre>\n<!-- more-->\n\n<p>Here&rsquo;s some <a href=\"http://bullshitipsum.com/?paragraphs=2\">Bullshit Ipsum</a>.</p>\n\n<p>Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &ldquo;vortals communities evolve technologies sexy methodologies.&rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.</p>\n\n<p>Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &ldquo;vortals vertical,&rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.</p>\n\n<p>Here&rsquo;s a footnote<sup><a href=\"#2012-01-01-a-2012-blog-post-footnote-1-definition\" name=\"2012-01-01-a-2012-blog-post-footnote-1-return\">1</a></sup>.</p>\n\n<h2 id=\"code-blocks\">Code blocks</h2>\n\n<p>Frog optionally uses <a href=\"http://pygments.org/\">Pygments</a> if it&rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:</p>\n\n<pre><code>```language\nsome racket code\n```</code></pre>\n\n<p>That name is given to Pygments as the lexer to use.</p>\n\n<p>For example this:</p>\n\n<pre><code>```js\n/**\n * Some JavaScript\n */\nfunction foo()\n{\n    if (counter &lt;= 10)\n        return;\n    // it works!\n```</code></pre>\n\n<p>Yields this:</p>\n\n<div class=\"brush: js\">\n <pre><code>/**\n * Some JavaScript\n */\nfunction foo()\n{\n    if (counter &lt;= 10)\n        return;\n    // it works!</code></pre></div>\n\n<p>And this:</p>\n\n<pre><code>```racket\n#lang racket\n;; Finds Racket sources in all subdirs\n(for ([path (in-directory)])\n  (when (regexp-match? #rx\"[.]rkt$\" path)\n    (printf \"source file: ~a\\n\" path)))\n(symbol-&gt;string 'foo)\n```</code></pre>\n\n<p>Yields this:</p>\n\n<div class=\"brush: racket\">\n <pre><code>#lang racket\n;; Finds Racket sources in all subdirs\n(for ([path (in-directory)])\n  (when (regexp-match? #rx\"[.]rkt$\" path)\n    (printf \"source file: ~a\\n\" path)))\n(symbol-&gt;string 'foo)</code></pre></div>\n\n<p>Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is <code>racket</code> or <code>racket/base</code>) are links to that documentation.</p>\n\n<p>This also works outside fenced code blocks, for symbols in backticks immediately followed by <code>[racket]</code>. Example: <code class=\"brush: racket\">printf</code>. This isn&rsquo;t official Markdown; it&rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using <code>@racket[printf]</code> in Scribble.</p>\n\n<p><code class=\"brush: racket\">symbol-&gt;string</code>.</p>\n\n<p>Here is a lambda: λ.</p>\n\n<p>Here is a lambda in code backticks: <code>λ</code>.</p>\n\n<p>And here in indented code block:</p>\n\n<pre><code>(λ () #t)</code></pre>\n\n<p>And here in fenced code block, no lang specified:</p>\n\n<pre><code>(λ () #t)</code></pre>\n\n<p>And here in fenced code block, lang = <code>racket</code>:</p>\n\n<div class=\"brush: racket\">\n <pre><code>(λ () #t)</code></pre></div>\n\n<p>And here in fenced code block, lang = <code>scheme</code>:</p>\n\n<div class=\"brush: scheme\">\n <pre><code>(λ () #t)</code></pre></div>\n\n<p>Here&rsquo;s a simple <code>for</code> macro, written in <a href=\"http://docs.racket-lang.org/reference/stx-patterns.html\">Racket</a>:</p>\n\n<div class=\"brush: racket\">\n <pre><code>(define-syntax-rule (for (x e1) e2)\n  (for-each (λ (x) e2) e1))</code></pre></div>\n\n<p>Here is a code block in a list item &mdash; once upon a time this was a bug that didn&rsquo;t work:</p>\n\n<ol>\n <li>\n  <p>A list item with code.</p>\n  <div class=\"brush: python\">\n   <pre><code>sum(range(100))</code></pre></div></li>\n <li>Another list item.</li></ol>\n\n<p>The end.</p>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2012-01-01-a-2012-blog-post-footnote-1-definition\" class=\"footnote-definition\">\n   <p>Footnote definition.&nbsp;<a href=\"#2012-01-01-a-2012-blog-post-footnote-1-return\">↩</a></p></li></ol></div>")) ((? . 2) f post (u . "Creating my blog using Frog, a Racket library") (? . 2) 1566505642 (p+ #"/home/jdiggity/playground/racket/frog-blog/2019/08/creating-my-blog-using-frog-a-racket-library.html" . unix) (u . "/2019/08/creating-my-blog-using-frog-a-racket-library.html") (u . "2019-08-22T15:58:41") (? . 1) #f (c (u . "Racket") c (u . "Programming") c (u . "Frog")) (u . "\n<p>Being my first blog post with Frog, I thought it would be a good idea to talk about what Frog is and why I chose it to create this blog.</p>\n\n<p><a href=\"https://github.com/greghendershott/frog\">Frog</a> is a static blog generator implemented in Racket. If you haven&rsquo;t heard of Racket, it is a programming language similar to Scheme that is strong at programming language design. Racket is fun to work with, and surprising fast to develop with once you get the hang of it. You don&rsquo;t need to know much Racket (if any) to use Frog, but you can use Racket to help modify the website if desired.</p>\n\n<p>Blog posts are written purely in markdown, which I love. That gives me a lot of control with how the blog posts look, without putting in a lot of effort. It also supports Python3&rsquo;s Pygments libr ary for syntax highlighting in code blocks, while not required, is a great addition for someone l ike me.</p>") #t (u . "\n<p>Being my first blog post with Frog, I thought it would be a good idea to talk about what Frog is and why I chose it to create this blog.</p>\n\n<p><a href=\"https://github.com/greghendershott/frog\">Frog</a> is a static blog generator implemented in Racket. If you haven&rsquo;t heard of Racket, it is a programming language similar to Scheme that is strong at programming language design. Racket is fun to work with, and surprising fast to develop with once you get the hang of it. You don&rsquo;t need to know much Racket (if any) to use Frog, but you can use Racket to help modify the website if desired.</p>\n\n<p>Blog posts are written purely in markdown, which I love. That gives me a lot of control with how the blog posts look, without putting in a lot of effort. It also supports Python3&rsquo;s Pygments libr ary for syntax highlighting in code blocks, while not required, is a great addition for someone l ike me.</p>\n<!-- more-->\n\n<h2 id=\"why-i-chose-frog\">Why I chose Frog</h2>\n\n<p>Even though the author, Greg Hendershott, recently posted about how frog isn&rsquo;t lightweight enough for his own blog anymore, it is exactly the amount of weight that I need. It takes markdown files, turns them into blog posts, and renders a nice static webpage that I can easily push to github. It is easy to modify the site as needed, but comes out of the box doing its job extremely well.</p>\n\n<p>I have tried creating blogs in the past, the most recent being one I wrote using Django, but they seemed to have too much overhead and didn&rsquo;t allow easy control over formatting my posts.</p>\n\n<h2 id=\"why-not-use-wordpress-or-blogger\">Why not use Wordpress or Blogger?</h2>\n\n<p>It is easier for me to open up my terminal, type <code>raco frog -n blog-title</code>, and write some markdown, than to have to log into a Blogger account or navigate to some site to create a post. I think the real reason is the hacker in me would rather just do it myself.</p>\n\n<h2 id=\"what-i-plan-for-the-future-with-frog\">What I plan for the future with Frog</h2>\n\n<p>I hope to write occational posts with updates on what I am working on, how-to&rsquo;s for anything programming related that I don&rsquo;t want to forget, as well as posts related to guitar and P4 tuning. I plan on adding some sort of tool to Frog that allows me to easily write and display guitar tab and/or music notation directly in my blog posts.</p>"))))